// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v2 generic arrayStyle should work well 1`] = `
"import { Types, Document } from 'mongoose';

// This file is created by @zcong/ts-mongoose-code-generator
export interface TestModel {
  id?: string | Types.ObjectId;
  name?: string;
  age?: number;
  requiredName: string;
  enumString?: 'test1' | 'test2';
  date?: Date;
  bool?: boolean;
  nested?: TestNestedSubModel;
  nestedArr?: Array<TestNestedArrSubModel>;
  nestedArr2?: Array<TestNestedArr2SubModel>;
  simpleArr?: Array<string>;
  simpleArr2?: Array<string>;
  directNested?: TestDirectNestedSubModel;
  directNestedArr?: Array<TestDirectNestedArrSubModel>;
  ref?: string | Types.ObjectId | (RefModel & Document);
  refs?: Array<string> | Array<Types.ObjectId> | Array<(RefModel & Document)>;
  withTypeField?: Array<TestWithTypeFieldSubModel>;
  mixedArr?: Array<any>;
  mixed?: any;
  bf?: Buffer;
  mp?: any;
  dc?: Types.Decimal128;
  dcs?: Array<Types.Decimal128>;
  _id?: string | Types.ObjectId;
  updated_at?: Date;
  created_at?: Date;
}

export interface TestNestedSubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export interface TestNestedArrSubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export interface TestNestedArr2SubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export interface TestDirectNestedSubModel {
  name?: string;
  age?: number;
}

export interface TestDirectNestedArrSubModel {
  name?: string;
  age?: number;
  _id?: string | Types.ObjectId;
}

export interface TestWithTypeFieldSubModel {
  type?: string;
  other?: string;
  _id?: string | Types.ObjectId;
}

export interface RefModel {
  refName?: string;
  _id?: string | Types.ObjectId;
  updatedAt?: Date;
  createdAt?: Date;
}
"
`;

exports[`v2 modelGenerator should work well 1`] = `
"import { Types, Document } from 'mongoose';

// This file is created by @zcong/ts-mongoose-code-generator
export class TestModel {
  id?: string | Types.ObjectId;
  name?: string;
  age?: number;
  requiredName: string;
  enumString?: string;
  date?: Date;
  bool?: boolean;
  nested?: TestNestedSubModel;
  nestedArr?: TestNestedArrSubModel[];
  nestedArr2?: TestNestedArr2SubModel[];
  simpleArr?: string[];
  simpleArr2?: string[];
  directNested?: TestDirectNestedSubModel;
  directNestedArr?: TestDirectNestedArrSubModel[];
  ref?: string | Types.ObjectId | (RefModel & Document);
  refs?: string[] | Types.ObjectId[] | (RefModel & Document)[];
  withTypeField?: TestWithTypeFieldSubModel[];
  mixedArr?: any[];
  mixed?: any;
  bf?: Buffer;
  mp?: any;
  dc?: Types.Decimal128;
  dcs?: Types.Decimal128[];
  _id?: string | Types.ObjectId;
  updated_at?: Date;
  created_at?: Date;
}

export class TestNestedSubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export class TestNestedArrSubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export class TestNestedArr2SubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export class TestDirectNestedSubModel {
  name?: string;
  age?: number;
}

export class TestDirectNestedArrSubModel {
  name?: string;
  age?: number;
  _id?: string | Types.ObjectId;
}

export class TestWithTypeFieldSubModel {
  type?: string;
  other?: string;
  _id?: string | Types.ObjectId;
}

export class RefModel {
  refName?: string;
  _id?: string | Types.ObjectId;
  updatedAt?: Date;
  createdAt?: Date;
}
"
`;

exports[`v2 modelGenerator stringEnumUseUnionType flag should work well 1`] = `
"import { Types, Document } from 'mongoose';

// This file is created by @zcong/ts-mongoose-code-generator
export interface TestModel {
  id?: string | Types.ObjectId;
  name?: string;
  age?: number;
  requiredName: string;
  enumString?: 'test1' | 'test2';
  date?: Date;
  bool?: boolean;
  nested?: TestNestedSubModel;
  nestedArr?: TestNestedArrSubModel[];
  nestedArr2?: TestNestedArr2SubModel[];
  simpleArr?: string[];
  simpleArr2?: string[];
  directNested?: TestDirectNestedSubModel;
  directNestedArr?: TestDirectNestedArrSubModel[];
  ref?: string | Types.ObjectId | (RefModel & Document);
  refs?: string[] | Types.ObjectId[] | (RefModel & Document)[];
  withTypeField?: TestWithTypeFieldSubModel[];
  mixedArr?: any[];
  mixed?: any;
  bf?: Buffer;
  mp?: any;
  dc?: Types.Decimal128;
  dcs?: Types.Decimal128[];
  _id?: string | Types.ObjectId;
  updated_at?: Date;
  created_at?: Date;
}

export interface TestNestedSubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export interface TestNestedArrSubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export interface TestNestedArr2SubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export interface TestDirectNestedSubModel {
  name?: string;
  age?: number;
}

export interface TestDirectNestedArrSubModel {
  name?: string;
  age?: number;
  _id?: string | Types.ObjectId;
}

export interface TestWithTypeFieldSubModel {
  type?: string;
  other?: string;
  _id?: string | Types.ObjectId;
}

export interface RefModel {
  refName?: string;
  _id?: string | Types.ObjectId;
  updatedAt?: Date;
  createdAt?: Date;
}
"
`;

exports[`v2 modelGenerator use interface should work well 1`] = `
"import { Types, Document } from 'mongoose';

// This file is created by @zcong/ts-mongoose-code-generator
export interface TestModel {
  id?: string | Types.ObjectId;
  name?: string;
  age?: number;
  requiredName: string;
  enumString?: string;
  date?: Date;
  bool?: boolean;
  nested?: TestNestedSubModel;
  nestedArr?: TestNestedArrSubModel[];
  nestedArr2?: TestNestedArr2SubModel[];
  simpleArr?: string[];
  simpleArr2?: string[];
  directNested?: TestDirectNestedSubModel;
  directNestedArr?: TestDirectNestedArrSubModel[];
  ref?: string | Types.ObjectId | (RefModel & Document);
  refs?: string[] | Types.ObjectId[] | (RefModel & Document)[];
  withTypeField?: TestWithTypeFieldSubModel[];
  mixedArr?: any[];
  mixed?: any;
  bf?: Buffer;
  mp?: any;
  dc?: Types.Decimal128;
  dcs?: Types.Decimal128[];
  _id?: string | Types.ObjectId;
  updated_at?: Date;
  created_at?: Date;
}

export interface TestNestedSubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export interface TestNestedArrSubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export interface TestNestedArr2SubModel {
  nestedName?: string;
  _id?: string | Types.ObjectId;
}

export interface TestDirectNestedSubModel {
  name?: string;
  age?: number;
}

export interface TestDirectNestedArrSubModel {
  name?: string;
  age?: number;
  _id?: string | Types.ObjectId;
}

export interface TestWithTypeFieldSubModel {
  type?: string;
  other?: string;
  _id?: string | Types.ObjectId;
}

export interface RefModel {
  refName?: string;
  _id?: string | Types.ObjectId;
  updatedAt?: Date;
  createdAt?: Date;
}
"
`;
